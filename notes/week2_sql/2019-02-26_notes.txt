Azure
PluralSight
Microsoft Virtual Academy

Stuff in Azure
All Resources
Cost Management + Billing - Overview

Create SQL Database
Need a resource group
Additional settings, Sample database, AdventureWorksLT
sql server firewalls and virtual networks to set firewall rule

go to dev essesntials to get Azure account

relational databases
    tables 
        rows
        columns

ID    Product         Color           Supplier        Phone
1    widget          Red             Microsoft       555-1234
2    Thingybob       Black, Red      Amazon          555-4321
3    Knicknack       Black, Blue     Microsoft       555-1234

N-to-1 relationship between color and product/ID
Make another table in order to normalize
Product ID      Color
1               Red
2               Bla
3               Bla
2               R
3               Blu

referential integrity
every FK value corresponds to an existing row in the other table

Phone depends upon Supplier
Supplier depends upon Phone
Supplier depends upon Product
Color depends upon Product

Product is the candidate key for the table, since Product determines Supplier which determines Phone

database management system (DBMS)

relational DBMS (RDBMS)

SQL (structured query language)
    SQL Server (T-SQL, Transact-SQL)
    MySQL
    OracleSQL
    PostgresSQL
    SQLite

Functional dependency (relationship between one set of columns and another set of columns)
for two sets of columns X and Y...
X depends on Y if, for each possible set of Y values, there is exactly one possible set of
X values (Y -> X)
If two rows had the same X, you'd know the values of X must be the same
X is a fact about you
often the "sets" are size 1

candidate key (of a table)
minimal set of columns that every other column depends on
The values of any candidate key can uniquely identify that rows

primary key (of a table) (often denoted by an underline)
one of the candidate keys that we choose to actually identify the row

any key of any kind with more than one column in it is a composite key

foreign key (of a table)
a column that has copies of a table's primary key to establish a relationship between
the rows of the two tables

non-atomic values
- problem? hard to read values, have to search through strings

update anomaly
- problem that arises from redundancy
- with redundant data, we might not update all copies

deletion anomaly
- if we delete some data, we sometimes lost other data

insertion anomaly
- it becomes impossible to insert some data without some associated data

The solution to some of these problems is normalization
before 1NF would be all databases including the unnormalized ones
1NF is the first level of normalization
2NF even more constraints
3NF even more

1NF: first normal form
- no duplicate rows
(enforce that with a PK)
- atomic values
- no repeating groups of columns (e.g. Color 1, Color 2, Color 3)

2NF: second normal form
- 1NF
- no non-CK column may depend on PART of any composite CK
- no partial dependency

2NF demo
CityID      City    State   Region  SalesTotal


Region depends upon State
CityID is unique, should know everything else
CityID is a candidate key
City and State together are a candidate key


3NF: 
- no non-candidate key column may depend on any other non candidate key column
- no transitive dependencies or no indirect dependencies


normal forms mnemonic
non-CK columns should depend on "the keys, the whole keys, and nothing but the keys"

normalization
pro                                               con
less redundancy                                   some queries can be slower (but more tend to get faster)  
less errors
easier to evolve data model
easier to read and write with consistency

sometimes there is an advantage to denormalization (reading a lot more than writing is a good example)